// Code generated by goyacc -o xpath.go -p expr xpath.y. DO NOT EDIT.

//line xpath.y:19

package expr

import __yyfmt__ "fmt"

//line xpath.y:20

import (
	"encoding/xml"

	"github.com/sdcio/yang-parser/xpath"
	"github.com/sdcio/yang-parser/xpath/xutils"
)

//line xpath.y:31
type exprSymType struct {
	yys     int
	sym     *xpath.Symbol /* Symbol table entry */
	val     float64       /* Numeric value */
	name    string        /* NodeType or AxisName */
	xmlname xml.Name      /* For NameTest */
}

const NUM = 57346
const DOTDOT = 57347
const DBLSLASH = 57348
const DBLCOLON = 57349
const ERR = 57350
const FUNC = 57351
const TEXTFUNC = 57352
const NODETYPE = 57353
const AXISNAME = 57354
const LITERAL = 57355
const NAMETEST = 57356
const CURRENTFUNC = 57357
const DEREFFUNC = 57358
const OR = 57359
const AND = 57360
const NE = 57361
const EQ = 57362
const GT = 57363
const GE = 57364
const LT = 57365
const LE = 57366
const DIV = 57367
const MOD = 57368
const UNARYMINUS = 57369

var exprToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"NUM",
	"DOTDOT",
	"DBLSLASH",
	"DBLCOLON",
	"ERR",
	"FUNC",
	"TEXTFUNC",
	"NODETYPE",
	"AXISNAME",
	"LITERAL",
	"NAMETEST",
	"CURRENTFUNC",
	"DEREFFUNC",
	"OR",
	"AND",
	"NE",
	"EQ",
	"GT",
	"GE",
	"LT",
	"LE",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"MOD",
	"UNARYMINUS",
	"'|'",
	"'('",
	"')'",
	"','",
	"'['",
	"']'",
	"'.'",
	"'@'",
}

var exprStatenames = [...]string{}

const exprEofCode = 1
const exprErrCode = 2
const exprInitialStackSize = 16

//line xpath.y:374

/* Code is in .go files so we get the benefit of gofmt etc.
 * What's above is formatted as best as emacs Bison-mode will allow,
 * with semi-colons added to help Bison-mode think the code is C!
 *
 * If anyone can come up with a better formatting model I'm all ears ... (-:
 */

//line yacctab:1
var exprExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 14,
	6, 30,
	28, 30,
	-2, 27,
	-1, 34,
	36, 70,
	-2, 63,
	-1, 76,
	36, 70,
	-2, 61,
}

const exprPrivate = 57344

const exprLast = 265

var exprAct = [...]int8{
	2, 110, 118, 37, 109, 13, 77, 7, 16, 21,
	9, 12, 114, 64, 5, 6, 62, 44, 126, 66,
	68, 120, 61, 4, 40, 111, 42, 105, 72, 123,
	124, 8, 69, 115, 116, 104, 80, 79, 75, 74,
	57, 60, 58, 59, 71, 45, 78, 34, 70, 48,
	43, 46, 55, 56, 52, 54, 51, 53, 47, 86,
	87, 88, 89, 83, 97, 84, 85, 67, 92, 93,
	94, 82, 95, 68, 98, 99, 107, 100, 101, 102,
	103, 76, 68, 108, 50, 49, 112, 90, 91, 42,
	45, 113, 81, 96, 63, 41, 35, 33, 22, 26,
	25, 24, 68, 68, 23, 19, 68, 68, 18, 17,
	20, 119, 65, 117, 15, 14, 10, 121, 3, 119,
	122, 29, 44, 45, 1, 125, 31, 30, 32, 40,
	28, 42, 38, 39, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 11, 0, 36, 0, 0, 0, 0,
	27, 106, 29, 44, 45, 43, 46, 31, 30, 32,
	40, 28, 42, 38, 39, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 11, 0, 36, 0, 0, 0,
	0, 27, 73, 29, 44, 45, 43, 46, 31, 30,
	32, 40, 28, 42, 38, 39, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 11, 0, 36, 0, 0,
	0, 0, 27, 0, 29, 44, 45, 43, 46, 31,
	30, 32, 40, 28, 42, 38, 39, 0, 0, 0,
	44, 45, 0, 0, 0, 0, 0, 40, 36, 42,
	38, 39, 0, 27, 0, 0, 0, 0, 43, 46,
	0, 0, 0, 36, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 43, 46,
}

var exprPact = [...]int16{
	179, -1000, -1000, 41, 31, 65, 33, 27, 13, -1000,
	9, 179, -1000, -1000, -23, 84, 39, -1000, -1000, -1000,
	-1000, -1000, -1000, 12, -1000, 20, 16, 148, -1000, -1000,
	6, 5, -1000, 75, -1000, -1000, -1000, 12, 4, 3,
	85, -1000, -1000, -1000, -1000, -1000, -1000, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	210, -1000, -1000, 179, -1000, 12, 12, 12, 12, 39,
	12, 12, 1, -1000, -7, 117, -1000, -23, 39, -9,
	225, -1000, 31, 65, 33, 33, 27, 27, 27, 27,
	13, 13, -1000, -1000, -1000, -1000, -25, -1000, 39, 39,
	-1000, -1000, 39, 39, -1000, -1000, -1000, -1, -23, -23,
	-1000, -1000, -13, -1000, -1000, -1000, 179, -23, -1000, -1000,
	-1000, -5, -1000, -1000, 179, -16, -1000,
}

var exprPgo = [...]int8{
	0, 124, 0, 118, 23, 14, 15, 7, 31, 10,
	116, 11, 5, 115, 114, 8, 3, 110, 1, 109,
	108, 105, 104, 101, 100, 99, 9, 98, 97, 47,
	6, 4, 2, 96, 95, 94, 93, 91,
}

var exprR1 = [...]int8{
	0, 1, 2, 3, 3, 4, 4, 5, 5, 5,
	6, 6, 6, 6, 6, 7, 7, 7, 8, 8,
	8, 8, 9, 9, 10, 10, 11, 11, 11, 11,
	14, 13, 13, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 12, 12, 12, 12, 19, 19, 19,
	20, 20, 24, 21, 21, 25, 22, 15, 15, 15,
	26, 26, 26, 26, 26, 28, 28, 29, 31, 31,
	30, 32, 18, 35, 36, 37, 23, 27, 33, 33,
	34, 16,
}

var exprR2 = [...]int8{
	0, 1, 1, 1, 3, 1, 3, 1, 3, 3,
	1, 3, 3, 3, 3, 1, 3, 3, 1, 3,
	3, 3, 1, 2, 1, 3, 1, 1, 3, 3,
	1, 1, 2, 3, 2, 1, 1, 3, 3, 4,
	6, 8, 1, 1, 1, 1, 1, 1, 2, 1,
	1, 3, 3, 1, 3, 4, 1, 1, 3, 1,
	5, 2, 4, 1, 1, 2, 1, 1, 1, 2,
	0, 0, 3, 1, 1, 1, 2, 3, 1, 1,
	1, 1,
}

var exprChk = [...]int16{
	-1000, -1, -2, -3, -4, -5, -6, -7, -8, -9,
	-10, 26, -11, -12, -13, -14, -15, -19, -20, -21,
	-17, -26, -27, -22, -23, -24, -25, 33, 13, 4,
	10, 9, 11, -28, -29, -33, 28, -16, 15, 16,
	12, -34, 14, 38, 5, 6, 39, 17, 18, 20,
	19, 23, 21, 24, 22, 25, 26, 27, 29, 30,
	32, -9, -18, -35, 36, 28, -16, 28, -16, -15,
	28, 28, -2, 34, 33, 33, -29, -30, -15, 33,
	33, 7, -4, -5, -6, -6, -7, -7, -7, -7,
	-8, -8, -9, -9, -9, -11, -36, -2, -15, -15,
	-26, -26, -15, -15, 34, 34, 34, -2, -30, -31,
	-18, 34, -12, -37, 37, 34, 35, -31, -32, -18,
	34, -2, -32, 34, 35, -2, 34,
}

var exprDef = [...]int8{
	0, -2, 1, 2, 3, 5, 7, 10, 15, 18,
	22, 0, 24, 26, -2, 0, 43, 44, 45, 46,
	31, 57, 59, 47, 49, 50, 53, 0, 35, 36,
	0, 0, 42, 0, -2, 64, 56, 0, 0, 0,
	0, 66, 67, 78, 79, 81, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 23, 32, 0, 73, 0, 0, 0, 0, 48,
	0, 0, 0, 34, 0, 0, -2, 0, 76, 0,
	0, 65, 4, 6, 8, 9, 11, 12, 13, 14,
	16, 17, 19, 20, 21, 25, 0, 74, 28, 29,
	58, 77, 51, 54, 33, 37, 38, 0, 0, 71,
	68, 52, 0, 72, 75, 39, 0, 71, 62, 69,
	55, 0, 60, 40, 0, 0, 41,
}

var exprTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	33, 34, 27, 25, 35, 26, 38, 28, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 39, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 36, 3, 37, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 32,
}

var exprTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 29, 30, 31,
}

var exprTok3 = [...]int8{
	0,
}

var exprErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	exprDebug        = 0
	exprErrorVerbose = false
)

type exprLexer interface {
	Lex(lval *exprSymType) int
	Error(s string)
}

type exprParser interface {
	Parse(exprLexer) int
	Lookahead() int
}

type exprParserImpl struct {
	lval  exprSymType
	stack [exprInitialStackSize]exprSymType
	char  int
}

func (p *exprParserImpl) Lookahead() int {
	return p.char
}

func exprNewParser() exprParser {
	return &exprParserImpl{}
}

const exprFlag = -1000

func exprTokname(c int) string {
	if c >= 1 && c-1 < len(exprToknames) {
		if exprToknames[c-1] != "" {
			return exprToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func exprStatname(s int) string {
	if s >= 0 && s < len(exprStatenames) {
		if exprStatenames[s] != "" {
			return exprStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func exprErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !exprErrorVerbose {
		return "syntax error"
	}

	for _, e := range exprErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + exprTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(exprPact[state])
	for tok := TOKSTART; tok-1 < len(exprToknames); tok++ {
		if n := base + tok; n >= 0 && n < exprLast && int(exprChk[int(exprAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if exprDef[state] == -2 {
		i := 0
		for exprExca[i] != -1 || int(exprExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; exprExca[i] >= 0; i += 2 {
			tok := int(exprExca[i])
			if tok < TOKSTART || exprExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if exprExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += exprTokname(tok)
	}
	return res
}

func exprlex1(lex exprLexer, lval *exprSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(exprTok1[0])
		goto out
	}
	if char < len(exprTok1) {
		token = int(exprTok1[char])
		goto out
	}
	if char >= exprPrivate {
		if char < exprPrivate+len(exprTok2) {
			token = int(exprTok2[char-exprPrivate])
			goto out
		}
	}
	for i := 0; i < len(exprTok3); i += 2 {
		token = int(exprTok3[i+0])
		if token == char {
			token = int(exprTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(exprTok2[1]) /* unknown char */
	}
	if exprDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", exprTokname(token), uint(char))
	}
	return char, token
}

func exprParse(exprlex exprLexer) int {
	return exprNewParser().Parse(exprlex)
}

func (exprrcvr *exprParserImpl) Parse(exprlex exprLexer) int {
	var exprn int
	var exprVAL exprSymType
	var exprDollar []exprSymType
	_ = exprDollar // silence set and not used
	exprS := exprrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	exprstate := 0
	exprrcvr.char = -1
	exprtoken := -1 // exprrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		exprstate = -1
		exprrcvr.char = -1
		exprtoken = -1
	}()
	exprp := -1
	goto exprstack

ret0:
	return 0

ret1:
	return 1

exprstack:
	/* put a state and value onto the stack */
	if exprDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", exprTokname(exprtoken), exprStatname(exprstate))
	}

	exprp++
	if exprp >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprS[exprp] = exprVAL
	exprS[exprp].yys = exprstate

exprnewstate:
	exprn = int(exprPact[exprstate])
	if exprn <= exprFlag {
		goto exprdefault /* simple state */
	}
	if exprrcvr.char < 0 {
		exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
	}
	exprn += exprtoken
	if exprn < 0 || exprn >= exprLast {
		goto exprdefault
	}
	exprn = int(exprAct[exprn])
	if int(exprChk[exprn]) == exprtoken { /* valid shift */
		exprrcvr.char = -1
		exprtoken = -1
		exprVAL = exprrcvr.lval
		exprstate = exprn
		if Errflag > 0 {
			Errflag--
		}
		goto exprstack
	}

exprdefault:
	/* default state action */
	exprn = int(exprDef[exprstate])
	if exprn == -2 {
		if exprrcvr.char < 0 {
			exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if exprExca[xi+0] == -1 && int(exprExca[xi+1]) == exprstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			exprn = int(exprExca[xi+0])
			if exprn < 0 || exprn == exprtoken {
				break
			}
		}
		exprn = int(exprExca[xi+1])
		if exprn < 0 {
			goto ret0
		}
	}
	if exprn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			exprlex.Error(exprErrorMessage(exprstate, exprtoken))
			Nerrs++
			if exprDebug >= 1 {
				__yyfmt__.Printf("%s", exprStatname(exprstate))
				__yyfmt__.Printf(" saw %s\n", exprTokname(exprtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for exprp >= 0 {
				exprn = int(exprPact[exprS[exprp].yys]) + exprErrCode
				if exprn >= 0 && exprn < exprLast {
					exprstate = int(exprAct[exprn]) /* simulate a shift of "error" */
					if int(exprChk[exprstate]) == exprErrCode {
						goto exprstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if exprDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", exprS[exprp].yys)
				}
				exprp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if exprDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", exprTokname(exprtoken))
			}
			if exprtoken == exprEofCode {
				goto ret1
			}
			exprrcvr.char = -1
			exprtoken = -1
			goto exprnewstate /* try again in the same state */
		}
	}

	/* reduction by production exprn */
	if exprDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", exprn, exprStatname(exprstate))
	}

	exprnt := exprn
	exprpt := exprp
	_ = exprpt // guard against "declared and not used"

	exprp -= int(exprR2[exprn])
	// exprp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if exprp+1 >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprVAL = exprS[exprp+1]

	/* consult goto table to find next state */
	exprn = int(exprR1[exprn])
	exprg := int(exprPgo[exprn])
	exprj := exprg + exprS[exprp].yys + 1

	if exprj >= exprLast {
		exprstate = int(exprAct[exprg])
	} else {
		exprstate = int(exprAct[exprj])
		if int(exprChk[exprstate]) != -exprn {
			exprstate = int(exprAct[exprg])
		}
	}
	// dummy call; replaced with literal code
	switch exprnt {

	case 1:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line xpath.y:63
		{
			getProgBldr(exprlex).CodeFn(
				getProgBldr(exprlex).Store, "store")
		}
	case 4:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line xpath.y:74
		{
			getProgBldr(exprlex).CodeFn(
				getProgBldr(exprlex).Or, "or")
		}
	case 6:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line xpath.y:82
		{
			getProgBldr(exprlex).CodeFn(
				getProgBldr(exprlex).And, "and")
		}
	case 8:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line xpath.y:90
		{
			getProgBldr(exprlex).CodeFn(
				getProgBldr(exprlex).Eq, "eq")
		}
	case 9:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line xpath.y:95
		{
			getProgBldr(exprlex).CodeFn(
				getProgBldr(exprlex).Ne, "ne")
		}
	case 11:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line xpath.y:103
		{
			getProgBldr(exprlex).CodeFn(
				getProgBldr(exprlex).Lt, "lt")
		}
	case 12:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line xpath.y:108
		{
			getProgBldr(exprlex).CodeFn(
				getProgBldr(exprlex).Gt, "gt")
		}
	case 13:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line xpath.y:113
		{
			getProgBldr(exprlex).CodeFn(
				getProgBldr(exprlex).Le, "le")
		}
	case 14:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line xpath.y:118
		{
			getProgBldr(exprlex).CodeFn(
				getProgBldr(exprlex).Ge, "ge")
		}
	case 16:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line xpath.y:126
		{
			getProgBldr(exprlex).CodeFn(
				getProgBldr(exprlex).Add, "add")
		}
	case 17:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line xpath.y:131
		{
			getProgBldr(exprlex).CodeFn(
				getProgBldr(exprlex).Sub, "sub")
		}
	case 19:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line xpath.y:139
		{
			getProgBldr(exprlex).CodeFn(
				getProgBldr(exprlex).Mul, "mul")
		}
	case 20:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line xpath.y:144
		{
			getProgBldr(exprlex).CodeFn(
				getProgBldr(exprlex).Div, "div")
		}
	case 21:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line xpath.y:149
		{
			getProgBldr(exprlex).CodeFn(
				getProgBldr(exprlex).Mod, "mod")
		}
	case 23:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line xpath.y:157
		{
			getProgBldr(exprlex).CodeFn(
				getProgBldr(exprlex).Negate, "negate")
		}
	case 25:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line xpath.y:165
		{
			getProgBldr(exprlex).CodeFn(
				getProgBldr(exprlex).Union, "union")
		}
	case 26:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line xpath.y:172
		{
			getProgBldr(exprlex).CodeFn(
				getProgBldr(exprlex).EvalLocPath, "evalLocPath")
		}
	case 28:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line xpath.y:178
		{
			getProgBldr(exprlex).CodeFn(
				getProgBldr(exprlex).EvalLocPath, "evalLocPath")
		}
	case 29:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line xpath.y:183
		{
			getProgBldr(exprlex).CodeFn(
				getProgBldr(exprlex).EvalLocPath, "evalLocPath")
		}
	case 30:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line xpath.y:193
		{
			getProgBldr(exprlex).CodeFn(
				getProgBldr(exprlex).FilterExprEnd, "filterExprEnd")
		}
	case 35:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line xpath.y:206
		{
			getProgBldr(exprlex).CodeLiteral(exprDollar[1].name)
		}
	case 36:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line xpath.y:210
		{
			getProgBldr(exprlex).CodeNum(exprDollar[1].val)
		}
	case 37:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line xpath.y:214
		{
			getProgBldr(exprlex).Text()
		}
	case 38:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line xpath.y:218
		{
			getProgBldr(exprlex).CodeBltin(exprDollar[1].sym, 0)
		}
	case 39:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line xpath.y:222
		{
			getProgBldr(exprlex).CodeBltin(exprDollar[1].sym, 1)
		}
	case 40:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line xpath.y:226
		{
			getProgBldr(exprlex).CodeBltin(exprDollar[1].sym, 2)
		}
	case 41:
		exprDollar = exprS[exprpt-8 : exprpt+1]
//line xpath.y:230
		{
			getProgBldr(exprlex).CodeBltin(exprDollar[1].sym, 3)
		}
	case 42:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line xpath.y:234
		{
			getProgBldr(exprlex).UnsupportedName(xutils.NODETYPE, exprDollar[1].name)
		}
	case 52:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line xpath.y:255
		{
			getProgBldr(exprlex).CodePathSetCurrent()
		}
	case 55:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line xpath.y:267
		{
			getProgBldr(exprlex).Deref()
		}
	case 56:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line xpath.y:280
		{
			getProgBldr(exprlex).CodePathOper('/')
		}
	case 65:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line xpath.y:305
		{
			getProgBldr(exprlex).UnsupportedName(xutils.AXISNAME, exprDollar[1].name)
		}
	case 67:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line xpath.y:311
		{
			getProgBldr(exprlex).CodeNameTest(exprDollar[1].xmlname)
		}
	case 70:
		exprDollar = exprS[exprpt-0 : exprpt+1]
//line xpath.y:320
		{
			getProgBldr(exprlex).PredicatesStart()
		}
	case 71:
		exprDollar = exprS[exprpt-0 : exprpt+1]
//line xpath.y:325
		{
			getProgBldr(exprlex).PredicatesEnd()
		}
	case 73:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line xpath.y:332
		{
			getProgBldr(exprlex).CodePredStart()
		}
	case 75:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line xpath.y:340
		{
			getProgBldr(exprlex).CodePredEnd()
		}
	case 78:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line xpath.y:352
		{
			getProgBldr(exprlex).CodePathOper('.')
		}
	case 79:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line xpath.y:356
		{
			getProgBldr(exprlex).CodePathOper(xutils.DOTDOT)
		}
	case 80:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line xpath.y:362
		{
			getProgBldr(exprlex).UnsupportedName(
				'@', "not yet implemented")
		}
	case 81:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line xpath.y:369
		{
			getProgBldr(exprlex).UnsupportedName(
				xutils.DBLSLASH, "not yet implemented")
		}
	}
	goto exprstack /* stack new state and value */
}
